name: Build and Package ChatAAC

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            runtime: win-x64
          - os: ubuntu-latest
            runtime: linux-x64
          - os: macos-latest
            runtime: osx-x64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x' # Upewnij się, że wersja odpowiada Twojemu projektowi

    - name: Install dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --configuration Release --no-restore

    - name: Publish project
      run: dotnet publish --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --no-build -o ./publish

    - name: Package Application
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Pakietowanie dla Windows - tworzenie ZIP
          cd publish
          Compress-Archive -Path * -DestinationPath ../ChatAAC-Windows.zip
        elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          # Pakietowanie dla Linux - tworzenie tar.gz
          cd publish
          tar -czvf ../ChatAAC-Linux.tar.gz .
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          # Pakietowanie dla macOS - tworzenie tar.gz
          cd publish
          tar -czvf ../ChatAAC-macOS.tar.gz .
        fi

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ChatAAC-${{ matrix.os }}
        path: |
          ChatAAC-Windows.zip
          ChatAAC-Linux.tar.gz
          ChatAAC-macOS.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ChatAAC-windows-latest
        path: ./artifacts/windows

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ChatAAC-ubuntu-latest
        path: ./artifacts/linux

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ChatAAC-macos-latest
        path: ./artifacts/macos

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0 # Możesz dynamicznie generować tagi
        release_name: Release v1.0.0
        draft: false
        prerelease: false

    - name: Upload Windows Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/windows/ChatAAC-Windows.zip
        asset_name: ChatAAC-Windows.zip
        asset_content_type: application/zip

    - name: Upload Linux Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/linux/ChatAAC-Linux.tar.gz
        asset_name: ChatAAC-Linux.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/macos/ChatAAC-macOS.tar.gz
        asset_name: ChatAAC-macOS.tar.gz
        asset_content_type: application/gzip
